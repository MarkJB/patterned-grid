{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/Tile.ts","webpack:///./src/index.ts"],"sourcesContent":["import SVG from \"svg.js\";\r\nimport { parseSVG as parsePath } from \"svg-path-parser\";\r\n\r\n// Define the Tile class - arcs\r\nclass Tile {\r\n  element: SVGElement;\r\n  showArcs: boolean;\r\n  tileSize: number;\r\n  numberOfLines: number;\r\n\r\n  constructor(\r\n    showArcs: boolean = true,\r\n    tileSize: number = 100,\r\n    numberOfLines: number = 10\r\n  ) {\r\n    this.showArcs = showArcs;\r\n    this.tileSize = tileSize;\r\n    this.numberOfLines = numberOfLines;\r\n    this.element = this.createTileElement();\r\n  }\r\n\r\n  createTileElement(): SVGElement {\r\n    const group = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n    group.setAttribute(\"class\", \"tile\");\r\n\r\n    // Instead of manually specifying the points for each Radii (arcRadii) we can\r\n    // calculate that based on the size of the tile and the number of lines we want\r\n    const calcRadii = (size: number, qty: number): number[] => {\r\n      const spacing = size / qty;\r\n      console.log(\"CalcRadii, size\", size, \"quantity\", qty, \"spacing\", spacing);\r\n      let arcRadii = [];\r\n      for (let i = 0; i <= qty; i++) {\r\n        arcRadii.push(0 + i * spacing); // add each position to the array\r\n      }\r\n      return arcRadii;\r\n    };\r\n\r\n    // const direction = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\r\n    const direction = \"horizontal\";\r\n\r\n    const radii = calcRadii(this.tileSize, this.numberOfLines);\r\n\r\n    // Draw the lines and add them to the linesGroup\r\n    for (const radius of radii) {\r\n      const lines = this.createLine(radius, direction);\r\n      group.appendChild(lines);\r\n    }\r\n\r\n    // If we are showing arcs on this tile,\r\n    if (this.showArcs) {\r\n      const arcCenter = { x: 0, y: 0 };\r\n      const largestRadius = radii[radii.length - 1];\r\n\r\n      // Convert the linesGroup.lines into an array\r\n      Array.from(group.querySelectorAll(\"line\")).forEach((line) => {\r\n        // Extract the line start and end for the current line\r\n        const lineStart = {\r\n          x: parseFloat(line.getAttribute(\"x1\") as string),\r\n          y: parseFloat(line.getAttribute(\"y1\") as string),\r\n        };\r\n        const lineEnd = {\r\n          x: parseFloat(line.getAttribute(\"x2\") as string),\r\n          y: parseFloat(line.getAttribute(\"y2\") as string),\r\n        };\r\n\r\n        // Determine if there is an intersection for the current line\r\n        const intersection = this.lineArcIntersection(\r\n          lineStart,\r\n          lineEnd,\r\n          arcCenter,\r\n          largestRadius\r\n        );\r\n\r\n        if (intersection) {\r\n          console.log(\"Intersection found\", intersection);\r\n          line.setAttribute(\"x1\", String(intersection.x));\r\n          line.setAttribute(\"y1\", String(intersection.y));\r\n        } else {\r\n          console.log(\"No intersection found\");\r\n        }\r\n      });\r\n\r\n      // for each radius in the radii array\r\n      for (const radius of radii) {\r\n        const arc = this.createArc(0, 0, radius, 0, 0 + 90);\r\n        group.appendChild(arc);\r\n      }\r\n    }\r\n    return group;\r\n  }\r\n\r\n  createLine(radius: number, direction: \"horizontal\" | \"vertical\"): SVGElement {\r\n    console.log(\r\n      \"Creating a single line with direction\",\r\n      direction,\r\n      \"and length\",\r\n      radius\r\n    );\r\n\r\n    const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\r\n\r\n    // Horizontal Lines start at x1=0 y1=radius and finish at x2=100, y2=radius\r\n    // Vertical Lines start at x1=radius y1=0 and finish at x2=radius, y2=100\r\n    if (direction === \"horizontal\") {\r\n      // Start of line\r\n      line.setAttribute(\"x1\", \"0\");\r\n      line.setAttribute(\"y1\", String(radius));\r\n      //   end of line\r\n      line.setAttribute(\"x2\", \"100\");\r\n      line.setAttribute(\"y2\", String(radius));\r\n    } else {\r\n      // Start of line\r\n      line.setAttribute(\"x1\", String(radius));\r\n      line.setAttribute(\"y1\", \"0\");\r\n      //   end of line\r\n      line.setAttribute(\"x2\", String(radius));\r\n      line.setAttribute(\"y2\", \"100\");\r\n    }\r\n\r\n    line.setAttribute(\"stroke\", \"black\");\r\n    line.setAttribute(\"stroke-width\", \"1\");\r\n\r\n    return line;\r\n  }\r\n\r\n  // return an SVG arc for the given start coordinates and radius between the start and end angle\r\n  createArc(\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n    startAngle: number,\r\n    endAngle: number\r\n  ): SVGElement {\r\n    const startPoint = this.polarToCartesian(cx, cy, r, startAngle);\r\n    const endPoint = this.polarToCartesian(cx, cy, r, endAngle);\r\n\r\n    const arc = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n    const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n    const d = [\r\n      \"M\",\r\n      startPoint.x,\r\n      startPoint.y,\r\n      \"A\",\r\n      r,\r\n      r,\r\n      0,\r\n      largeArcFlag,\r\n      1,\r\n      endPoint.x,\r\n      endPoint.y,\r\n    ].join(\" \");\r\n\r\n    arc.setAttribute(\"d\", d);\r\n    arc.setAttribute(\"fill\", \"none\");\r\n    arc.setAttribute(\"stroke\", \"black\");\r\n    arc.setAttribute(\"stroke-width\", \"1\");\r\n\r\n    return arc;\r\n  }\r\n\r\n  // Convert polar coordinates to cartesian\r\n  polarToCartesian(\r\n    cx: number,\r\n    cy: number,\r\n    r: number,\r\n    angle: number\r\n  ): { x: number; y: number } {\r\n    const radians = (angle * Math.PI) / 180;\r\n    return {\r\n      x: cx + r * Math.cos(radians),\r\n      y: cy + r * Math.sin(radians),\r\n    };\r\n  }\r\n\r\n  // Determine the coordinates where a line crosses an arc\r\n  lineArcIntersection(\r\n    lineStart: { x: number; y: number },\r\n    lineEnd: { x: number; y: number },\r\n    arcCenter: { x: number; y: number },\r\n    arcRadius: number\r\n  ): { x: number; y: number } | null {\r\n    const dx = lineEnd.x - lineStart.x;\r\n    const dy = lineEnd.y - lineStart.y;\r\n    const dr = Math.sqrt(dx * dx + dy * dy);\r\n    const D = lineStart.x * lineEnd.y - lineEnd.x * lineStart.y;\r\n    const delta = arcRadius * arcRadius * dr * dr - D * D;\r\n\r\n    if (delta < 0) {\r\n      return null; // No intersection\r\n    }\r\n\r\n    const sign = dy < 0 ? -1 : 1;\r\n    const x1 = (D * dy - sign * dx * Math.sqrt(delta)) / (dr * dr);\r\n    const y1 = (-D * dx - Math.abs(dy) * Math.sqrt(delta)) / (dr * dr);\r\n    const x2 = (D * dy + sign * dx * Math.sqrt(delta)) / (dr * dr);\r\n    const y2 = (-D * dx + Math.abs(dy) * Math.sqrt(delta)) / (dr * dr);\r\n\r\n    // Return the intersection point closer to the line's start point\r\n    const d1 = Math.hypot(lineStart.x - x1, lineStart.y - y1);\r\n    const d2 = Math.hypot(lineStart.x - x2, lineStart.y - y2);\r\n    return d1 < d2 ? { x: x1, y: y1 } : { x: x2, y: y2 };\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","import Tile from \"./Tile\";\r\n\r\n// Create a grid of patterned tiles\r\nconst grid = document.getElementById(\"grid\");\r\nconst numRows = 10;\r\nconst numCols = 12;\r\n\r\nconst outerSVG = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\nouterSVG.setAttribute(\"viewBox\", `0 0 ${numCols * 100} ${numRows * 100}`);\r\nouterSVG.setAttribute(\"width\", \"100%\");\r\nouterSVG.setAttribute(\"height\", \"100%\");\r\nouterSVG.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\ngrid?.appendChild(outerSVG);\r\n\r\n// Loop to add tiles to a grid\r\nfor (let row = 0; row < numRows; row++) {\r\n  for (let col = 0; col < numCols; col++) {\r\n    // Chose a random rotation for the tile (constrained to 0, 90, 180 & 270)\r\n    const rotation = Math.floor(Math.random() * 4) * 90;\r\n    // const rotation = 0;\r\n\r\n    // Randomly decide whether to show arcs (defaults to true)\r\n    const showArcs = Math.random() < 0.5;\r\n\r\n    // Add a tile to the grid (all the work is done in the Tile class)\r\n    const tile = new Tile();\r\n    // Define the SVG element using the tile content\r\n    const tileGroup = tile.element;\r\n    // Apply a grid offset and rotation to the tile\r\n    tileGroup.setAttribute(\r\n      \"transform\",\r\n      `translate(${col * 100} ${row * 100}) rotate(${rotation} 50 50)`\r\n    );\r\n    // tileGroup.setAttribute(\"class\", \"tile\");\r\n    // Append the SVG element 'tileGroup' to the SVG\r\n    outerSVG?.appendChild(tileGroup);\r\n  }\r\n}\r\n\r\n// SVG Export (Save (Download) an SVG when the download button is clicked)\r\nconst downloadButton = document.getElementById(\"download-svg\");\r\n\r\nif (downloadButton) {\r\n  downloadButton.addEventListener(\"click\", () => {\r\n    // Serialize the outerSVG element\r\n    const svgData = new XMLSerializer().serializeToString(outerSVG);\r\n\r\n    // Create a Blob and a URL for the SVG data\r\n    const svgBlob = new Blob([svgData], {\r\n      type: \"image/svg+xmlcharset=utf-8\",\r\n    });\r\n    const svgUrl = URL.createObjectURL(svgBlob);\r\n\r\n    // Create a download link, set its href and download attributes, and trigger a click event\r\n    const downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = svgUrl;\r\n    downloadLink.download = \"generated-image.svg\";\r\n    document.body.appendChild(downloadLink);\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink);\r\n  });\r\n}\r\n\r\n// export default Tile;\r\n"],"names":["showArcs","tileSize","numberOfLines","this","element","createTileElement","group","document","createElementNS","setAttribute","radii","size","qty","spacing","console","log","arcRadii","i","push","calcRadii","radius","lines","createLine","appendChild","x","y","length","Array","from","querySelectorAll","forEach","line","lineStart","parseFloat","getAttribute","lineEnd","intersection","lineArcIntersection","String","arc","createArc","direction","cx","cy","r","startAngle","endAngle","startPoint","polarToCartesian","endPoint","largeArcFlag","d","join","angle","radians","Math","PI","cos","sin","arcCenter","arcRadius","dx","dy","dr","sqrt","D","delta","sign","x1","y1","abs","x2","y2","hypot","grid","getElementById","outerSVG","numCols","numRows","row","col","rotation","floor","random","tileGroup","downloadButton","addEventListener","svgData","XMLSerializer","serializeToString","svgBlob","Blob","type","svgUrl","URL","createObjectURL","downloadLink","createElement","href","download","body","click","removeChild"],"sourceRoot":""}